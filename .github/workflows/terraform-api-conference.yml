name: 'Terraform Conference API Deploy'

on:
  workflow_dispatch: 
    
  push:
    branches:
    - main
    
    paths: 
    - '/terraform/apis/conferenceapi/**'
  pull_request:

jobs:
  deploy:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_OIDC_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      modulePath: 'terraform/apis/conferenceapi'
      terraform_version: 1.3.4
      plan_name: 'conferenceapi.${{github.run_number}}.tfplan'
    runs-on: ubuntu-latest
    environment: dev

    defaults:
        run:
          shell: bash
          working-directory: ${{ env.modulePath }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.terraform_version }}

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.AZURE_TF_STATE_RESOURCE_GROUP_NAME }}"   \
          -backend-config="storage_account_name=${{ secrets.AZURE_TF_STATE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_NAME }}"     \
          -backend-config="key=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_KEY }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -lock=false -no-color -out /$RUNNER_TEMP/$plan_name
      continue-on-error: false

    - run: terraform show -no-color tfplan
      id: show

    - uses: actions/github-script@v6
      env:
        PLAN: ${{ steps.show.outputs.stdout }} # <-- reference the "show" step
      with:
        script: |
          const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
          <details><summary>Show Plan</summary>
    
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
    
          </details>
    
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
    
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })`
    
    - name: Terraform Apply
      id: apply
      run: terraform apply -no-color -auto-approve /$RUNNER_TEMP/$plan_name
      continue-on-error: false
      if: steps.plan.outcome == 'success'

    