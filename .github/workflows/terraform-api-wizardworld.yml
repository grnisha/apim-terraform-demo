name: 'Terraform Wizard World API Deploy'

on:
  workflow_dispatch: 
    
  push:
    branches:
    - main   
    paths: 
    - '/terraform/apis/wizardworldapi/**'
  pull_request:

jobs:
  deploy:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_OIDC_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      modulePath: 'terraform/apis/wizardworldapi'
      confapicontainer: 'demo-api-state'
      terraform_version: 1.3.4
      plan_name: 'wizardworldapi.${{github.run_number}}.tfplan'
    runs-on: ubuntu-latest
    environment: dev

    defaults:
        run:
          shell: bash
          working-directory: ${{ env.modulePath }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.terraform_version }}

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.AZURE_TF_STATE_RESOURCE_GROUP_NAME }}"   \
          -backend-config="storage_account_name=${{ secrets.AZURE_TF_STATE_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ env.confapicontainer }}"     \
          -backend-config="key=${{ secrets.AZURE_TF_STATE_STORAGE_CONTAINER_KEY }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -lock=false -no-color -out /$RUNNER_TEMP/$plan_name
      continue-on-error: false

    - name: Terraform Apply
      id: apply
      run: terraform apply -no-color -auto-approve /$RUNNER_TEMP/$plan_name
      continue-on-error: false
      if: steps.plan.outcome == 'success'

  test:
    name: 'Test' 
    environment: dev
    runs-on: ubuntu-latest
    env:
      WIZARDWORLD_API_URL: ${{ secrets.WIZARDWORLD_API_URL }}
      WIZARDWORLD_API_KEY: ${{ secrets.WIZARDWORLD_API_KEY }}
    needs: deploy
    permissions:
      id-token: write
      contents: read
      checks: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: npm install newman
      run: npm install newman -g

    - name: Replace variables in JSON file
      run: |
        envsubst < tests/wizardworldapi.json > tests/wizardworldapi.json.tmp
        mv tests/wizardworldapi.json.tmp tests/wizardworldapi.json

    - name: Run Tests
      id: run_tests
      run: newman run tests/wizardworldapi.json -x -r junit --reporter-junit-export JUnitReport.xml 

    - name: Display Test Report
      run: cat JUnitReport.xml
    
    - name: Report
      uses: dorny/test-reporter@v1
      if: success() || failure() 
      with:
        name: Test Report
        path: JUnitReport.xml
        reporter: java-junit
        fail-on-error: false

    